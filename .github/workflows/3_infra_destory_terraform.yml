name: 3_Infra Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (e.g., dev, staging, prod)'
        required: true
        default: dev
      location:
        description: 'Location of resource deployment  (e.g., eastus, westus)'
        required: true
        default: eastus

env:
  TF_VERSION: '1.5.6' # Adjust the version as per your requirement
  WORKING_DIRECTORY: './3_Infra/env/dev' # Path to your Terraform configuration directory
  LOCATION: ${{ github.event.inputs.location }}
  RESOURCE_GROUP_NAME: "terraform-backend-rg"
  STORAGE_ACCOUNT_NAME: "tfbackendmodule"
  CONTAINER_NAME: "tfstate"
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}


permissions:
  id-token: write
  contents: read 
  
jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.pull_request.base.ref == 'main' && 'prod' || 'dev' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Authenticate to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Azure Storage Account for Backend
      run: |
        RESOURCE_GROUP_NAME="${{ env.RESOURCE_GROUP_NAME }}"
        STORAGE_ACCOUNT_NAME="${{ env.STORAGE_ACCOUNT_NAME }}"
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
        LOCATION="${{ env.LOCATION }}"

        az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
        az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob
        ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' --output tsv)
        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

        echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME]$STORAGE_ACCOUNT_NAME"
        echo "##vso[task.setvariable variable=CONTAINER_NAME]$CONTAINER_NAME"
        echo "##vso[task.setvariable variable=ACCOUNT_KEY]$ACCOUNT_KEY"

        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
        echo "ACCOUNT_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="key=terraform.tfstate"

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform validate

    - name: Terraform Plan Destroy
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform plan -destroy -out destroy-main.tfplan -var-file="./../../config/global.tfvars" -var-file="./../../config/dev.tfvars"

    - name: Terraform Apply Destroy
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform apply destroy-main.tfplan

    - name: Cleanup tfstate Resource Group
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        RESOURCE_GROUP_NAME="terraform-backend-rg"
        az group delete --name $RESOURCE_GROUP_NAME --yes --no-wait
